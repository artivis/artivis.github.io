<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>APT | Home to artivis</title><link>https://artivis.github.io/tag/apt/</link><atom:link href="https://artivis.github.io/tag/apt/index.xml" rel="self" type="application/rss+xml"/><description>APT</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en</language><lastBuildDate>Mon, 03 Jun 2024 00:00:00 +0000</lastBuildDate><image><url>https://artivis.github.io/media/icon_hud2d1771ce140e1d1fd4d0e59d51cebc4_11712_512x512_fill_lanczos_center_3.png</url><title>APT</title><link>https://artivis.github.io/tag/apt/</link></image><item><title>Setting up an APT cache</title><link>https://artivis.github.io/post/2024/apt-cache/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2024/apt-cache/</guid><description>&lt;p>I&amp;rsquo;ve been advocating in several past posts for the use of &lt;a href="https://canonical.com/lxd" target="_blank" rel="noopener">LXD&lt;/a> as a virtual development environment - see for instance &lt;a href="https://artivis.github.io/post/2024/ros2-jazzy">&amp;ldquo;Setting up ROS 2 Jazzy with LXD&amp;rdquo;&lt;/a>.
But when setting up such environment for ROS 2,
we find ourselves downloading hundreds of packages which may take some times.&lt;/p>
&lt;p>There are several ways we can address this and we are going to explore one here that has the advantages of being rather simple and generalise beyond LXD and ROS 2.
That solution is to cache our packages in an apt proxy.&lt;/p>
&lt;p>In this post we&amp;rsquo;re going to make use of &lt;a href="https://canonical.com/lxd" target="_blank" rel="noopener">LXD&lt;/a>,
&lt;a href="https://cloudinit.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">cloud-init&lt;/a> and adresse ROS 2 specifically but none of those are absolutely necessary and a similar setup can be replicated in a different scenario.&lt;/p>
&lt;p>Let&amp;rsquo;s get started.&lt;/p>
&lt;h2 id="creating-a-proxy">Creating a proxy&lt;/h2>
&lt;p>First thing first,
we shall set up a container that will act as the apt proxy and locally cache the debs.&lt;/p>
&lt;p>So let&amp;rsquo;s start by creating said container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:24.04 apt-proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once instantiated,
we can then shell into the container and update/upgrade it for good measure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc shell apt-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@apt-proxy:~$ apt update &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt upgrade -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hereafter, the commands are run inside the &amp;lsquo;apt-proxy&amp;rsquo; container.&lt;/p>
&lt;p>In our proxy, we will use the &lt;a href="https://www.unix-ag.uni-kl.de/~bloch/acng/" target="_blank" rel="noopener">apt-cacher-ng&lt;/a> project.
To best describe apt-cacher-ng, let&amp;rsquo;s quote it&amp;rsquo;s documentation:&lt;/p>
&lt;blockquote>
&lt;p>[apt-cacher-ng is a] caching proxy. Specialized for package files from Linux distributors, primarily for Debian (and Debian based) distributions&lt;/p>
&lt;/blockquote>
&lt;p>And at this point, that&amp;rsquo;s pretty much all we need to know as it is pretty much &amp;lsquo;install &amp;amp; forget&amp;rsquo;. So let&amp;rsquo;s do just that.&lt;/p>
&lt;p>To install it enter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install apt-cacher-ng
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, make sure that the service is running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ systemctl status apt-cacher-ng
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">● apt-cacher-ng.service - Apt-Cacher NG software download proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/apt-cacher-ng.service&lt;span class="p">;&lt;/span> enabled&lt;span class="p">;&lt;/span> preset: enabled&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it, the caching mechanism it set up and listening by default on port 3142.&lt;/p>
&lt;p>Before going any further,
wouldn&amp;rsquo;t it be nice if this very container used the caching mechanism?
To do so, create the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi /etc/apt/apt.conf.d/02proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">Acquire::http { Proxy &amp;#34;http://127.0.0.1:3142&amp;#34;; };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, the apt-proxy LXD container will use the caching as well.&lt;/p>
&lt;p>I&amp;rsquo;ve created a cloud-init config &lt;a href="https://gist.github.com/artivis/f1b201ae78fd182cc6c6dccd0abd0fa1" target="_blank" rel="noopener">available on GitHub&lt;/a> to easily launch this proxy container with the following one-liner:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:24.04 apt-proxy --config&lt;span class="o">=&lt;/span>user.user-data&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -L https://gist.githubusercontent.com/artivis/f1b201ae78fd182cc6c6dccd0abd0fa1/raw/apt-proxy.cloud-init.yaml&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="keeping-an-eye">Keeping an eye&lt;/h3>
&lt;p>Before moving on, let&amp;rsquo;s point out that we can keep an eye on the logs of the cacher as they are produced.
This will be helpfull to make sure that everything goes as planed.
To do so, enter the following in a terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tail -f /var/log/apt-cacher-ng/apt-cacher.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-a-client">Creating a client&lt;/h2>
&lt;p>Typically, a cloud-init configuration for ROS 2 is something along the lines of the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c">#cloud-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ros2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">source&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;deb [arch=amd64] http://packages.ros.org/ros2/ubuntu {{ v1.distro_release }} main&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">keyid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">C1CF 6E31 E6BA DE88 68B1 72B4 F42E D6FB AB17 C654&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">package_upgrade&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">packages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">build-essential&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">python3-colcon-common-extensions&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">ros-jazzy-ros-base&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Installing ROS 2, whether a minimal install or a full desktop one,
will usually install a lot of packages.
That the whole reason we&amp;rsquo;re setting up a cache in the first place!&lt;/p>
&lt;p>So how can we point our new ROS 2 container to the proxy?
The simplest solution is to install the &lt;a href="https://github.com/terceiro/auto-apt-proxy" target="_blank" rel="noopener">auto-apt-proxy&lt;/a> package.
This project is pretty much a bash script that &amp;ldquo;autodetect common [local] APT proxy setups&amp;rdquo;.&lt;/p>
&lt;p>To install it, we add the following to our cloud-init config:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">#cloud-config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ bootcmd:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ - [ cloud-init-per, once, apt-proxy-aptupdate, apt-get, update ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ - [ cloud-init-per, once, apt-proxy-aptinstall, apt-get, install, auto-apt-proxy ]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will make sure that the auto-apt-proxy package is be installed sufficiently early in the cloud-init process that subsequent calls to apt (such as the one operated by the &amp;lsquo;packages&amp;rsquo; keyword) will hit our proxy and thus our apt cache.
All of that happens rather automagically.&lt;/p>
&lt;p>Note that all in all, we only install the &lt;code>auto-apt-proxy&lt;/code> package.&lt;/p>
&lt;p>Alright, let us make sure that everything work.
First we shall create a client container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:24.04 jazzy-lxc --config&lt;span class="o">=&lt;/span>user.user-data&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -L https://gist.githubusercontent.com/artivis/0357fe03a5ae459bee8c55823fbb0af8/raw/ros2.cloudinit.yaml&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that I&amp;rsquo;m using in the command above a cloud-init configuration file that is &lt;a href="https://gist.github.com/artivis/0357fe03a5ae459bee8c55823fbb0af8" target="_blank" rel="noopener">available on GitHub&lt;/a>.&lt;/p>
&lt;p>While the container is instantiating,
let&amp;rsquo;s have a look on our cacher logs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tail -f /var/log/apt-cacher-ng/apt-cacher.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023357&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>14844&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023357&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>102&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023357&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>14844&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble-updates/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023357&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>102&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble-updates/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>5159&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/dists/noble/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>4933&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/dists/noble/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>14844&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>security.ubuntu.com/ubuntu/dists/noble-security/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>102&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>security.ubuntu.com/ubuntu/dists/noble-security/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>14844&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble-backports/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>102&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/dists/noble-backports/InRelease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>868602&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/dists/noble/main/binary-amd64/Packages.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023360&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>868326&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/dists/noble/main/binary-amd64/Packages.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>69304&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-colcon-core/python3-colcon-core_0.17.0-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>69018&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-colcon-core/python3-colcon-core_0.17.0-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>43798&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-catkin-pkg-modules/python3-catkin-pkg-modules_1.0.0-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>43527&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-catkin-pkg-modules/python3-catkin-pkg-modules_1.0.0-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>6844&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-colcon-alias/python3-colcon-alias_0.1.1-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>6562&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>ros2/pool/main/p/python3-colcon-alias/python3-colcon-alias_0.1.1-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>I&lt;span class="p">|&lt;/span>328416&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/pool/main/n/node-jquery/libjs-jquery_3.6.1+dfsg+~3.5.14-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1720023365&lt;span class="p">|&lt;/span>O&lt;span class="p">|&lt;/span>328029&lt;span class="p">|&lt;/span>10.203.148.193&lt;span class="p">|&lt;/span>archive.ubuntu.com/ubuntu/pool/main/n/node-jquery/libjs-jquery_3.6.1+dfsg+~3.5.14-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh wow. There is a lot that got printed.
Upon closer inspection,
we can essentially notice that the first 12 lines correspond to an (apt) update,
while the following ones are packages being downloaded.
It looks like it works!&lt;/p>
&lt;p>Another way to verify that is to shell inside the client container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc shell jazzy-lxc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and call apt with some debug logs as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ apt update -o Debug::Acquire::http&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using auto proxy detect command: /usr/bin/auto-apt-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">auto detect &lt;span class="nb">command&lt;/span> returned: &lt;span class="s1">&amp;#39;http://10.203.148.160:3142&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using auto proxy detect command: /usr/bin/auto-apt-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">auto detect &lt;span class="nb">command&lt;/span> returned: &lt;span class="s1">&amp;#39;http://10.203.148.160:3142&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Using auto proxy detect command: /usr/bin/auto-apt-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">auto detect &lt;span class="nb">command&lt;/span> returned: &lt;span class="s1">&amp;#39;http://10.203.148.160:3142&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0% &lt;span class="o">[&lt;/span>Working&lt;span class="o">]&lt;/span>GET http://security.ubuntu.com/ubuntu/dists/noble-security/InRelease HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: security.ubuntu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If-Modified-Since: Wed, &lt;span class="m">03&lt;/span> Jul &lt;span class="m">2024&lt;/span> 14:01:45 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Debian APT-HTTP/1.3 &lt;span class="o">(&lt;/span>2.7.14&lt;span class="o">)&lt;/span> non-interactive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GET http://packages.ros.org/ros2/ubuntu/dists/noble/InRelease HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: packages.ros.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If-Modified-Since: Tue, &lt;span class="m">25&lt;/span> Jun &lt;span class="m">2024&lt;/span> 14:39:05 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Debian APT-HTTP/1.3 &lt;span class="o">(&lt;/span>2.7.14&lt;span class="o">)&lt;/span> non-interactive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &amp;lsquo;10.203.148.160&amp;rsquo; should be the IP address of the &lt;code>apt-proxy&lt;/code> container.&lt;/p>
&lt;p>As before, we should see some new logs printed by the cacher,
logs that correspond to the update call.&lt;/p>
&lt;p>At last, for extra good measure,
we can verify that our ROS 2 packages are indeed cached on our proxy server.
Do to so, we can enter the following command in the &lt;code>apt-proxy&lt;/code> container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls /var/cache/apt-cacher-ng/packages.ros.org/pool/main/*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/var/cache/apt-cacher-ng/ros2/pool/main/p/:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3-catkin-pkg-modules python3-colcon-cmake python3-colcon-installed-package-information python3-colcon-package-information python3-colcon-recursive-crawl python3-rosdistro-modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3-colcon-alias python3-colcon-common-extensions python3-colcon-mixin python3-colcon-package-selection python3-colcon-ros python3-rospkg-modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3-colcon-bash python3-colcon-core python3-colcon-notification python3-colcon-parallel-executor python3-colcon-zsh python3-vcstool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3-colcon-cd python3-colcon-defaults python3-colcon-output python3-colcon-powershell python3-rosdep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3-colcon-clean python3-colcon-devtools python3-colcon-override-check python3-colcon-python-setup-py python3-rosdep-modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/var/cache/apt-cacher-ng/ros2/pool/main/r/:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-action-msgs ros-jazzy-ament-lint-common ros-jazzy-pybind11-vendor ros-jazzy-ros2run ros-jazzy-rpyutils
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-actionlib-msgs ros-jazzy-ament-package ros-jazzy-python-cmake-module ros-jazzy-ros2service ros-jazzy-sensor-msgs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-ament-cmake ros-jazzy-ament-pep257 ros-jazzy-rcl ros-jazzy-ros2topic ros-jazzy-sensor-msgs-py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-ament-cmake-auto ros-jazzy-ament-uncrustify ros-jazzy-rcl-action ros-jazzy-rosbag2 ros-jazzy-service-msgs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-ament-cmake-copyright ros-jazzy-ament-xmllint ros-jazzy-rcl-interfaces ros-jazzy-rosbag2-compression ros-jazzy-shape-msgs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-jazzy-ament-cmake-core ros-jazzy-builtin-interfaces ros-jazzy-rcl-lifecycle ros-jazzy-rosbag2-compression-zstd ros-jazzy-shared-queues-vendor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, there are plenty packages there.&lt;/p>
&lt;h2 id="some-metrics">Some metrics&lt;/h2>
&lt;p>As a very scientific benchmark,
we are going to spawn the very same container,
with the same ROS 2 ready cloud-init configuration we used previously,
with and without the &lt;code>apt-proxy&lt;/code> container running.&lt;/p>
&lt;p>We recall the command to launch the container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:24.04 jazzy-lxc --config&lt;span class="o">=&lt;/span>user.user-data&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -L https://gist.githubusercontent.com/artivis/0357fe03a5ae459bee8c55823fbb0af8/raw/ros2.cloudinit.yaml&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In both cases, we&amp;rsquo;ll wait for cloud-init to finish:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">exec&lt;/span> jazzy-lxc -- cloud-init status --wait
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And as a measure, we will rely on cloud-init with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">exec&lt;/span> jazzy-lxc -- cloud-init analyze show
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the results are:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>exec time (s)&lt;/th>
&lt;th style="text-align:center">apt_configure&lt;/th>
&lt;th style="text-align:center">package_update_upgrade_install&lt;/th>
&lt;th style="text-align:center">total&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>w/o proxy&lt;/td>
&lt;td style="text-align:center">18.44&lt;/td>
&lt;td style="text-align:center">179.95&lt;/td>
&lt;td style="text-align:center">240.47&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>with proxy&lt;/td>
&lt;td style="text-align:center">03.57&lt;/td>
&lt;td style="text-align:center">39.59&lt;/td>
&lt;td style="text-align:center">90.66&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The results are clear,
we observe a ~2.5x speed increase in apt operations.&lt;/p>
&lt;p>Note that for good measure I ran this test a couple times.
The results between runs varies a bit of course but not significantly given the difference.&lt;/p>
&lt;!--
## On using mirrors
### Configuring the proxy for ROS 2 mirrors
We will create a file listing ROS 2 repository mirrors.
```bash
vi /etc/apt-cacher-ng/ros2_mirror
```
Then we edit the `apt-cacher-ng` configuration file:
```bash
vi /etc/apt-cacher-ng/acng.conf
```
and append the following:
```diff
+ file:ros2_mirror /packages.ros.org ; http://packages.ros.org/ros2/ubuntu
```
-->
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>We have seen in this post how to set up an apt proxy to locally cache debs allowing us to speed up the instantiation of ROS 2 ready LXD containers.
And as we&amp;rsquo;ve seen, it is fairly simple. Gaining a ~2.5x speed increase in apt operations at the cost of &amp;lsquo;fire &amp;amp; forget&amp;rsquo;ing a server container and installing a single package in our clients is a pretty good deal.&lt;/p>
&lt;p>Remember that while we examplified the setup here using LXD and a ROS 2 dev environment,
this can be replicated in other scenario as well.&lt;/p>
&lt;p>At last, the apt-cacher-ng comes loaded with features and options that you can define in the file &lt;code>/etc/apt-cacher-ng/acng.conf&lt;/code>.
I leave it to you to explore that and tweak the cacher to your needs.&lt;/p></description></item></channel></rss>