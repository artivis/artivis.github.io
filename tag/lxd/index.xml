<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LXD | Home to artivis</title><link>https://artivis.github.io/tag/lxd/</link><atom:link href="https://artivis.github.io/tag/lxd/index.xml" rel="self" type="application/rss+xml"/><description>LXD</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 23 May 2022 00:00:00 +0000</lastBuildDate><image><url>https://artivis.github.io/media/icon_hud2d1771ce140e1d1fd4d0e59d51cebc4_11712_512x512_fill_lanczos_center_3.png</url><title>LXD</title><link>https://artivis.github.io/tag/lxd/</link></image><item><title>Setting up ROS 2 Humble with LXD</title><link>https://artivis.github.io/post/2022/ros2-humble/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2022/ros2-humble/</guid><description>&lt;p>&lt;a href="https://discourse.ros.org/t/ros-2-humble-hawksbill-released" target="_blank" rel="noopener">ROS 2 Humble Hawksbill is out!&lt;/a>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://aws1.discourse-cdn.com/business7/uploads/ros/original/2X/e/e2b80a2e45b12a397dbfebddb3abe92a1b4ce921.png" alt="ROS 2 Humble Hawksbill logo" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Congratulations to &lt;a href="https://www.openrobotics.org/" target="_blank" rel="noopener">Open Robotics&lt;/a> and through them to the entire ROS 2 community.
This is really quite an event as it marks an important milestone: it is the first 5 year LTS release for ROS 2.
The release of maturity as people say.&lt;/p>
&lt;p>ROS 2 Humble officially supports Ubuntu 22.04, but chance is,
you haven&amp;rsquo;t made that jump yet.
So in this post we will see how to set it up in an &lt;a href="https://linuxcontainers.org/lxd/introduction/" target="_blank" rel="noopener">LXD&lt;/a> container so that we can start &lt;del>playing&lt;/del> working on our good old machine.&lt;/p>
&lt;p>We&amp;rsquo;ve covered how to get started with LXD in numerous previous posts;
so here we will only go over the commands to get started as quickly and conveniently as possible.&lt;/p>
&lt;h2 id="setting-up-lxd">Setting up LXD&lt;/h2>
&lt;p>&lt;a href="https://linuxcontainers.org/lxd/introduction/" target="_blank" rel="noopener">LXD&lt;/a> is a manager for &lt;a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">LXC&lt;/a>.&lt;/p>
&lt;p>With this out of the way,
the simplest way to install it is to use the snap package:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo snap install lxd --channel&lt;span class="o">=&lt;/span>5.0/stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we are specifying the use of the recently released 5.0 LTS version.&lt;/p>
&lt;p>Let us now configure LXD,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo lxd init --minimal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The minimal setup will configure LXD with default options.
You may find more information about this in the &lt;a href="https://linuxcontainers.org/lxd/getting-started-cli/#initial-configuration" target="_blank" rel="noopener">online documentation&lt;/a>.&lt;/p>
&lt;h3 id="launching-a-first-container">Launching a first container&lt;/h3>
&lt;p>To make sure that everything works fine,
let us try to launch a first container rocking Ubuntu 22.04,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:22.04 first-container
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Is it running?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> NAME &lt;span class="p">|&lt;/span> STATE &lt;span class="p">|&lt;/span> IPV4 &lt;span class="p">|&lt;/span> IPV6 &lt;span class="p">|&lt;/span> TYPE &lt;span class="p">|&lt;/span> SNAPSHOTS &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> first-container &lt;span class="p">|&lt;/span> RUNNING &lt;span class="p">|&lt;/span> 10.190.86.230 &lt;span class="o">(&lt;/span>eth0&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span> fd42:1726:4b4d:8cd3:216:3eff:fed8:7a69 &lt;span class="o">(&lt;/span>eth0&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span> CONTAINER &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It seems so; then let&amp;rsquo;s try to get a shell inside the container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc shell first-container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@ros2-humble:~ lsb_release -a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No LSB modules are available.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Distributor ID: Ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Description: Ubuntu 22.04 LTS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Release: 22.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Codename: jammy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;re in, running 22.04.
Everything looks good!&lt;/p>
&lt;p>From there we could simply follow the &lt;a href="https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html" target="_blank" rel="noopener">installation instructions from the ROS 2 Humble documentation&lt;/a>.
But where is the fun in that?
Instead we will create a &lt;a href="https://linuxcontainers.org/lxd/docs/master/profiles/" target="_blank" rel="noopener">LXD profile&lt;/a> that will do all the lifting for us every time we will create a new container.&lt;/p>
&lt;h2 id="an-humble-profile">An Humble profile&lt;/h2>
&lt;p>First we need to create a profile,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile create ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will then edit it to add the bits we need.
But rather than editing the profile itself,
we will work on a good-old yaml file, located on our machine.
The reason is that it is more convenient and most importantly,
we will be able to carry that yaml file and re-use it on other machines.
Let&amp;rsquo;s create that profile,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p ~/lxc_dotfiles/profile/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch ~/lxc_dotfiles/profile/ros2-humble.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which we populate as follows,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user.user-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> #cloud-config
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Add the ROS 2 sources
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> sources:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ros2:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> source: &amp;#34;deb [arch=amd64] http://repo.ros2.org/ubuntu/main jammy main&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> keyid: C1CF 6E31 E6BA DE88 68B1 72B4 F42E D6FB AB17 C654
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> package_upgrade: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> packages:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # dev
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - vim
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - silversearcher-ag
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # ROS 2 dev
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - locales
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - curl
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - gnupg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - lsb-release
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - build-essential
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - cmake
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - git
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-argcomplete
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-colcon-common-extensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-blind-except
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-builtins
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-class-newline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-comprehensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-deprecated
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-docstrings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-import-order
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-flake8-quotes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-pip
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-pytest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-pytest-cov
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-pytest-repeat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-pytest-rerunfailures
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-rosdep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-setuptools
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - python3-vcstool
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - wget
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # ROS 2 packages
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - ros-humble-ros-core
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> runcmd:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # System setup
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;locale-gen en_US en_US.UTF-8&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;export LANG=en_US.UTF-8&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> #
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Fetch ROS 2 sources
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;mkdir -p /home/ubuntu/ros2_ws/src&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;wget https://raw.githubusercontent.com/ros2/ros2/master/ros2.repos -O /home/ubuntu/ros2_ws/ros2.repos&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;vcs import /home/ubuntu/ros2_ws/src &amp;lt; /home/ubuntu/ros2_ws/ros2.repos&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> #
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Install deps
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;sudo rosdep init&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;rosdep update&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - [su, ubuntu, -c, &amp;#34;rosdep install --from-paths /home/ubuntu/ros2_ws/src --ignore-src -y --skip-keys &amp;#39;fastcdr rti-connext-dds-6.0.1 urdfdom_headers gazebo_ros_pkgs&amp;#39; --rosdistro humble&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> final_message: &amp;#34;ROS 2 Humble Hawksbill dev container ready!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;A profile to automatically a ROS 2 Humble dev container.&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ros2-humble&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">used_by&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will not go into the details of this profile,
note simply that it takes advantage of &lt;a href="https://linuxcontainers.org/lxd/docs/master/cloud-init/" target="_blank" rel="noopener">LXD support of cloud-init&lt;/a> to set up the ppa, install packages and fetch the ROS 2 Humble source code.
Alright, let us carry on and launch our Humble container.
But let&amp;rsquo;s not forget to edit our LXD profile from the yaml file we have just created,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile edit ros2-humble &amp;lt; ~/lxc_dotfiles/profile/ros2-humble.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="launching-a-ros-2-humble-container">Launching a ROS 2 Humble container&lt;/h3>
&lt;p>With our profile ready,
all we have to do is to launch a new container with that profile,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc launch ubuntu:22.04 -p default -p ros2-humble ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we are also adding the &lt;code>default&lt;/code> profile which sets up the root filesystem and the network of our container.&lt;/p>
&lt;p>At this point the container is up and running.
However it isn&amp;rsquo;t quite ready yet.
Indeed, it is crunching the specified commands to get our ROS 2 environment ready.&lt;/p>
&lt;p>To monitor this process (the cloud-init initialization),
we can issue the following command,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc &lt;span class="nb">exec&lt;/span> ros2-humble -- cloud-init status --wait
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...............................................................................
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">status: &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which will print dots on the terminal as the initialization goes on,
and will do so until it is done.
When the command returns, the container is fully ready.&lt;/p>
&lt;p>We can now open a shell into the container as the default &lt;code>ubuntu&lt;/code> user,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc &lt;span class="nb">exec&lt;/span> ros2-humble -- sudo --login --user ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ubuntu@ros2-humble:~$ ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros2_ws
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ubuntu@ros2-humble:~$ ls /opt/ros/humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bin cmake include lib &lt;span class="nb">local&lt;/span> local_setup.bash local_setup.sh _local_setup_util.py local_setup.zsh setup.bash setup.sh setup.zsh share src tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The source workspace is there and the packages are installed.
Looks like we are ready to develop.&lt;/p>
&lt;h3 id="one-liniiiiing">One-liniiiiing&lt;/h3>
&lt;p>Phew; that was quite a few commands.
Some we will definitely not remember.
Let&amp;rsquo;s make our life easier and create some &lt;a href="https://linuxcontainers.org/lxd/advanced-guide/#command-aliases" target="_blank" rel="noopener">LXD aliases&lt;/a>.&lt;/p>
&lt;p>First, an alias to create a new ROS 2 Humble container given a name,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add launch-ros2-humble &lt;span class="s1">&amp;#39;launch ubuntu:22.04 -p default -p ros2-humble @ARGS@&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>use e.g.,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch-ros2-humble another-ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then an alias to wait for a container to be ready,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add wait-for &lt;span class="s1">&amp;#39;exec @ARGS@ -- cloud-init status --wait&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>use e.g.,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc wait-for another-ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And one to open a shell as the ubuntu user,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add ubuntu &lt;span class="s1">&amp;#39;exec @ARGS@ --mode interactive -- /bin/sh -xac $@ubuntu - exec /bin/login -p -f&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>use e.g.,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc ubuntu another-ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alright, we can now launch a branch new container,
wait for it to be ready and open a shell,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc launch-ros2-humble ros2-humble &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> lxc wait-for ros2-humble &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> lxc ubuntu ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">..................................................................................................................................................................................................................................................................................
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">status: &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ &lt;span class="nb">exec&lt;/span> /bin/login -p -f ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome to Ubuntu 22.04 LTS &lt;span class="o">(&lt;/span>GNU/Linux 5.4.0-110-generic x86_64&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Documentation: https://help.ubuntu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Management: https://landscape.canonical.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Support: https://ubuntu.com/advantage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System information as of Sun May &lt;span class="m">22&lt;/span> 10:06:39 PM UTC &lt;span class="m">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System load: 1.06347656253
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Usage of /home: unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Memory usage: 45%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Swap usage: 68%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Temperature: 59.0 C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Processes: &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Users logged in: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IPv4 address &lt;span class="k">for&lt;/span> eth0: 10.190.86.215
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IPv6 address &lt;span class="k">for&lt;/span> eth0: fd42:1726:4b4d:8cd3:216:3eff:fefb:fc68
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> updates can be applied immediately.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The programs included with the Ubuntu system are free software&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">the exact distribution terms &lt;span class="k">for&lt;/span> each program are described in the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">individual files in /usr/share/doc/*/copyright.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">applicable law.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ubuntu@ros2-humble:~$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was easy&amp;hellip;&lt;/p>
&lt;p>PS- you&amp;rsquo;ll excuse me for abusing a little the one-liner claim :D
(altho we could hide that in a bash alias&amp;hellip;).&lt;/p>
&lt;h2 id="develop-like-a-pro">Develop like a pro&lt;/h2>
&lt;p>That was a nice ride and all but now what?
Well, we could enable an easy SSH access to our container.
To do so we will push our SSH key to the container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp ~/.ssh/id_rsa.pub /tmp/authorized_keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc file push /tmp/authorized_keys ros2-humble/home/ubuntu/.ssh/authorized_keys -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we can then access our container through SSH,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh ubuntu@&amp;lt;container-ip&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We should really add this step to our profile instead.
And to do so we will simply add the following lines,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user.user-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> #cloud-config
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Retrieve SSH key to give the default user SSH access to the container
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # The key here is retrieved from GitHub user &amp;#39;myuser&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ssh_import_id:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - gh:myuser
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> # Add the ROS 2 sources
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> apt:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which will fetch our SSH public key from our GitHub user and set them up for the default user in the container.
If you prefer to retrieve the key from Launchpad instead,
replace &lt;code>- gh:myuser&lt;/code> with &lt;code>- lp:myuser&lt;/code>.
Also, make sure to replace &lt;code>myuser&lt;/code> with your actual user; just saying :D.&lt;/p>
&lt;p>Let&amp;rsquo;s make sure we update our profile again,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile edit ros2-humble &amp;lt; ~/lxc_dotfiles/profile/ros2-humble.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that because cloud-init only runs during the first boot,
we would need to recreate our container for this to take effect,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc stop ros2-humble &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> lxc delete ros2-humble
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc launch-ros2-humble ros2-humble &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> lxc wait-for ros2-humble
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again, once ready, we can SSH into our container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh ubuntu@&amp;lt;container-ip&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="using-vs-code-with-lxd">Using VS Code with LXD&lt;/h3>
&lt;p>Since we can SSH,
we can also make use of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank" rel="noopener">VS Code Remote - SSH extension&lt;/a>.
This neat little feature allows us to open any file or folder in a container,
a VM, or a remote machine.&lt;/p>
&lt;p>To install the extension,
head to Code and search for &amp;ldquo;remote ssh&amp;rdquo; in the Extensions panel or type in your terminal,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">code --install-extension ms-vscode-remote.remote-ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, open Code&amp;rsquo;s Command Palette (&lt;code>Ctrl+Shift+P&lt;/code>),
search for &lt;code>Remote-SSH: Connect to Host...&lt;/code> and enter your SSH connection details:
&lt;code>ubuntu@&amp;lt;container_ip&amp;gt;&lt;/code>.
From there you are able to browse and work on your fresh ROS 2 Humble workspace
using &lt;strong>File &amp;gt; Open&amp;hellip;&lt;/strong> or &lt;strong>File &amp;gt; Open Workspace&amp;hellip;&lt;/strong> just as you would locally!&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>ROS 2 Humble Hawksbill is an exciting new release and I can&amp;rsquo;t wait to get started with it.
Fortunately, as we&amp;rsquo;ve seen in this post,
we don&amp;rsquo;t have to wait to upgrade our machine to Ubuntu 22.04 to do so.&lt;/p>
&lt;p>If you want to know more about all the new shiny thingies that Humble brings,
have a look at this &lt;a href="https://docs.ros.org/en/foxy/Releases/Release-Humble-Hawksbill.html" target="_blank" rel="noopener">release page&lt;/a> and/or jump directly into the &lt;a href="https://docs.ros.org/en/humble/" target="_blank" rel="noopener">documentation&lt;/a>.&lt;/p>
&lt;p>Let us have fun!&lt;/p>
&lt;h3 id="bonus">Bonus&lt;/h3>
&lt;p>I&amp;rsquo;d strongly encourage you to revisit some older posts,
especially the following two that cover some interesting aspects of day-to-day development with LXD:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://artivis.github.io/post/2020/dotfiles">&amp;ldquo;Managing dotfiles&amp;rdquo;&lt;/a> - details how to manage our dotfiles and how that streamlines development in containers.&lt;/li>
&lt;li>&lt;a href="https://artivis.github.io/post/2020/lxc">&amp;ldquo;ROS Noetic development workflow in LXC&amp;rdquo;&lt;/a> - is a previous iteration over this very post and also covers how to enable graphical applications in LXD.
Something you may be interested in if you&amp;rsquo;d like to run things like Rviz!&lt;/li>
&lt;/ul></description></item><item><title>Get started with ROS 2 Foxy today with LXD</title><link>https://artivis.github.io/post/2020/ros-foxy-install/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2020/ros-foxy-install/</guid><description>&lt;p>The 5th of June 2020 marks the release of ROS 2 Foxy Fitzroy,
a 3 years long-term support (LTS) release and
the first ROS 2 distribution to target &lt;a href="https://ubuntu.com/blog/ubuntu-20-04-lts-arrives" target="_blank" rel="noopener">Ubuntu 20.04&lt;/a>.&lt;/p>
&lt;p>As summarized in the &lt;a href="https://discourse.ros.org/t/ros-foxy-fitzroy-released/14495" target="_blank" rel="noopener">ROS Discourse&lt;/a> post,
Foxy comes loaded with performance improvements, new features,
and maybe most importantly, with &lt;a href="https://index.ros.org/doc/ros2/Tutorials/" target="_blank" rel="noopener">tutorials&lt;/a>!
Get a full tour of the novelties by heading down to the
&lt;a href="https://index.ros.org/doc/ros2/Releases/Release-Foxy-Fitzroy/" target="_blank" rel="noopener">Foxy release page&lt;/a>.&lt;/p>
&lt;p>Now, you may be very excited about ROS 2 Foxy but you,
just as I, haven&amp;rsquo;t moved to Ubuntu 20.04 just yet.
But that will not stop us from getting our hands on
all the goodies this new release offers.&lt;/p>
&lt;p>Indeed, in this post we will see how to install ROS 2 Foxy Fitzroy
in a &lt;a href="https://linuxcontainers.org/lxd/introduction/" target="_blank" rel="noopener">LXD&lt;/a> container so that we can develop against the latest ROS 2
release without the need to upgrade our computer just yet.&lt;/p>
&lt;p>Hereafter we will assume that your are familiar with the command terminal
and that LXD is already installed on your machine.
If you are new to LXD or looking to improve your ROS development with it,
have a look to this post &lt;a href="https://artivis.github.io/post/2020/lxc">&amp;lsquo;ROS Noetic development workflow in LXC&amp;rsquo;&lt;/a>.&lt;/p>
&lt;p>Alright let us get started.&lt;/p>
&lt;h2 id="spawning-an-ubuntu-2004-lxd-container">Spawning an Ubuntu 20.04 LXD container&lt;/h2>
&lt;p>So the first thing we have to do is to create a LXD container based on an
Ubuntu 20.04 image. To do so we issue the following command,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:20.04 ros2-foxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It creates and starts a container named &amp;lsquo;ros2-foxy&amp;rsquo; based on an
Ubuntu 20.04 image. So far so good.&lt;/p>
&lt;p>Now to start a shell in our fresh container we will type,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">exec&lt;/span> ros2-foxy -- sudo --login --user ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are now inside our container, logged as the non-root user &amp;lsquo;ubuntu&amp;rsquo;.
Note that if the last command looks a bit unfriendly to you,
you can make it a &amp;rsquo;lxc&amp;rsquo; alias
(learn more about it in the &lt;a href="https://artivis.github.io/post/2020/lxc#lxc-aliases-to-the-rescue">aforementioned LXD post&lt;/a>).&lt;/p>
&lt;p>Now that our container is up and running, we shall install Foxy.&lt;/p>
&lt;h2 id="installing-ros-2-foxy-fitzroy">Installing ROS 2 Foxy Fitzroy&lt;/h2>
&lt;p>Inside our container, we will first add the ROS packages
repository to our sources. Starting with the key,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-key adv --fetch-keys https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the repository,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-add-repository http://packages.ros.org/ros2/ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case of trouble, you can also refer to the
&lt;a href="https://index.ros.org/doc/ros2/Installation/Foxy/" target="_blank" rel="noopener">official installation guide&lt;/a>.&lt;/p>
&lt;p>We are all set to install Foxy!&lt;/p>
&lt;p>For the installation, we can choose either of two options;
we can choose to install only the base components,
e.g. the communication libraries, message packages, command line tools, etc&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-foxy-ros-base
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or we can install the base + RViz, demos and tutorials,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-foxy-desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can pick any depending on your needs.
If you are not sure which to pick,
I would recommend you install the desktop version
in order to have all the tools you may need already installed.
However, note that if you intend to use some graphical applications
in your container, you have to take an extra step and set up some parameters
for your container.
All of this is detailed in the &lt;a href="https://artivis.github.io/post/2020/lxc#using-graphical-applications">aforementioned LXD post&lt;/a>.&lt;/p>
&lt;p>Since the container was created especially for Foxy,
we will automatically source it in our &amp;lsquo;.bashrc&amp;rsquo;,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;source /opt/ros/foxy/setup.bash&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every times we will log into our container,
ROS 2 Foxy will be sourced and we will be ready to develop!&lt;/p>
&lt;p>At last, we can install the Python package &amp;lsquo;argcomplete&amp;rsquo; to enable
autocompletion for the ROS 2 command line tools.
This is totally optional, but also totally recommended:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install python3-argcomplete
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With Foxy installed, all there is left to do is to take it for a spin.&lt;/p>
&lt;h2 id="quick-test">Quick test&lt;/h2>
&lt;p>We will try the simple talker-listener demo,
mixing cpp and Python to make sure that
the installation went fine and that we can start developing right away.
Note that if you installed the &amp;lsquo;base&amp;rsquo; version in the previous section,
you will need to install the following packages,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-foxy-demo-nodes-cpp ros-foxy-demo-nodes-py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the test, let us start fresh and close our current shell.
We will then open 2 new ones, one for the publisher and one for the subscriber.&lt;/p>
&lt;p>To start the publisher in the first shell enter,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ros2 run demo_nodes_cpp talker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461939.792327469&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>talker&lt;span class="o">]&lt;/span>: Publishing: &lt;span class="s1">&amp;#39;Hello World: 1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461940.792228229&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>talker&lt;span class="o">]&lt;/span>: Publishing: &lt;span class="s1">&amp;#39;Hello World: 2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461941.792184798&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>talker&lt;span class="o">]&lt;/span>: Publishing: &lt;span class="s1">&amp;#39;Hello World: 3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we can see that it starts publishing messages right away.&lt;/p>
&lt;p>To start the listener in the second shell enter,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ros2 run demo_nodes_py listener
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461964.793113956&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span>: I heard: &lt;span class="o">[&lt;/span>Hello World: 5&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461965.792782570&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span>: I heard: &lt;span class="o">[&lt;/span>Hello World: 6&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>INFO&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>1591461966.792823099&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>listener&lt;span class="o">]&lt;/span>: I heard: &lt;span class="o">[&lt;/span>Hello World: 7&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we can see that it receives messages right away as well.&lt;/p>
&lt;p>We are all set!&lt;/p></description></item><item><title>Managing dotfiles</title><link>https://artivis.github.io/post/2020/dotfiles/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2020/dotfiles/</guid><description>&lt;p>In this post, we will see how we can easily manage our personal
configuration files - a.k.a. dotfiles.
Yeah dotfiles, named after there common &lt;code>~/.my_config&lt;/code> form, you know,
all of those small configuration files lying across our $HOME.&lt;/p>
&lt;blockquote>
&lt;p>Because there is no place like $HOME&lt;/p>
&lt;/blockquote>
&lt;p>Because we are spending so much time on our machine, be it for work or for fun
(both at the same time if you are lucky),
we love to tweak our environment to our taste and needs.
Change the UX, create some aliases, use some dark theme and what not,
most if not all of these are saved in some configuration files somewhere.
And since we spent so much time making a home for ourselves,
wouldn&amp;rsquo;t it be great if we could quickly set it up again on a different computer?
Change the house but keep the furniture and decorations?
This is precisely what we are going to set up here.&lt;/p>
&lt;h2 id="picking-a-dotfiles-manager">Picking a dotfiles manager&lt;/h2>
&lt;p>Looking on the web for a dotfiles manager, you may find many of them -
see a whole &lt;a href="https://dotfiles.github.io/utilities/" target="_blank" rel="noopener">list of them here&lt;/a>. Most of them work off
the same principles, being a small set of utils to help manage our dotfiles.
Management includes most importantly versioning, often through git and
the installation of the files to their correct location as they are more than
often expected to be found at a given path.
You may want to give a look at the aforementioned list of managers
and pick one that best answers your needs and expectations.
Note that many are interchangeable.&lt;/p>
&lt;p>In this post we settled using &lt;a href="https://github.com/andsens/homeshick" target="_blank" rel="noopener">&lt;code>homeshick&lt;/code>&lt;/a>.
There are two main reasons for this choice.
Firstly, it is entirely written in bash, making it usable virtually anywhere.
Secondly, it &amp;lsquo;installs&amp;rsquo; dotfiles on our system using symlinks rather than
hard copies. The files thus exist in a single place.
Some other nice features includes, being git-based, being cli-based,
supporting multi dotfiles repos.
It has to be noted tho that the project is not in a really active
development and not very feature rich compared to other solutions.
It is a thin-layer that does the job.&lt;/p>
&lt;p>Alright so how do we get started?&lt;/p>
&lt;h2 id="building-our-castle">Building our castle&lt;/h2>
&lt;p>&lt;code>homeshick&lt;/code> relies around the concept of &lt;em>castles&lt;/em> which are nothing
more than git repositories.
A castle contains all of our dotfiles which are organized with the same
layout as our home directory.
But before building our castle, we need to install the appropriate tool.
To install &lt;code>homeshick&lt;/code>, nothing easier, we simply clone its repository
in our home:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/andsens/homeshick.git &lt;span class="nv">$HOME&lt;/span>/.homesick/repos/homeshick
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we are done. Now to use it, we only have to source it,
e.g. directly in our &lt;code>.bashrc&lt;/code>,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;source ~/.homesick/repos/homeshick/homeshick.sh&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also source its tab completion tool to ease our life,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;source ~/.homesick/repos/homeshick/completions/homeshick-completion.bash&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alright, we are done with the installation,
let us start creating the said castle.&lt;/p>
&lt;p>First we create a new local git repo through &lt;code>homeshick&lt;/code> cli tool,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ homeshick generate dotfiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates an empty castle named &amp;lsquo;dotfiles&amp;rsquo; in
&lt;code>~/.homesick/repos/dotfiles/&lt;/code>.
To populate our castle with a dotfile, we make use of the &amp;rsquo;track&amp;rsquo; command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">homeshick track &lt;span class="o">{&lt;/span>castle&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>dotfile&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To track our first file, say e.g. &lt;code>.bashrc&lt;/code>, we simply issue,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">homeshick track dotfiles ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command copies the file in our castle at
&lt;code>~/.homesick/repos/dotfiles/home/.bashrc&lt;/code> and replaces the original file
with a symlink to the copy.&lt;/p>
&lt;p>Now all we have to do is to commit our change and save our castle online,&lt;/p>
&lt;p>To move to our local repository, we enter,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ homeshick &lt;span class="nb">cd&lt;/span> dotfiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we can now use the usual git commands,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s1">&amp;#39;add .bashrc&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us save our castle online, e.g. on GitHub,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git remote add origin git@github.com:user/dotfiles.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We may now repeat this operation for each and every configuration file
we would like to save.
With our castle safely backed up online, we will now see
how we can quickly set up our environment on a new machine.&lt;/p>
&lt;h2 id="quickly-setting-up-a-new-machine">Quickly setting up a new machine&lt;/h2>
&lt;p>Whether you bought a new computer or nuked your old hardware with a
fresh new distro, you will now witness the true power of &lt;code>homeshick&lt;/code>.&lt;/p>
&lt;p>To install our cosy environment on a fresh distro,
all we have to do is,&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install &lt;code>homeshick&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/andsens/homeshick.git &lt;span class="nv">$HOME&lt;/span>/.homesick/repos/homeshick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.homesick/repos/homeshick/homeshick.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Import our castle&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">homeshick clone git@github.com:user/dotfiles.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Let &lt;code>homeshick&lt;/code> works its magic&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">homeshick link dotfiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>Voila! Home sweet home.&lt;/p>
&lt;p>Of course this post is only a quick overview of a given dotfiles manager.
I won&amp;rsquo;t detail here all of its options and features
and let you discover them for yourself in its &lt;a href="https://github.com/andsens/homeshick/wiki" target="_blank" rel="noopener">wiki&lt;/a>.
As mentioned previously many dotfiles managers rely on a git repository and the
same layout as &lt;code>homeshick&lt;/code> so you can get started with it and later move to
another one which better fits your needs.&lt;/p>
&lt;p>At this point you may be wondering if this is really worth it given that you probably
install a fresh distro every 2 years or so and completely change hardware even less
frequently.
Well, fellow developer, aren&amp;rsquo;t you using containers?
If not, you definitely should consider it and check &lt;a href="https://artivis.github.io/post/2020/lxc">this other post&lt;/a>
where I detail a development workflow for &lt;a href="https://www.ros.org/" target="_blank" rel="noopener">ROS&lt;/a> in &lt;a href="https://linuxcontainers.org/" target="_blank" rel="noopener">LXD&lt;/a>.&lt;/p>
&lt;h2 id="disposable-tiny-home">Disposable tiny home&lt;/h2>
&lt;p>If you are like me, trying your best to keep a tidy laptop while
messing around with plenty of different software toys,
then you may have had one of these days during which you spawn several containers.
Containers in which we don&amp;rsquo;t have our sweet bash aliases;
on our very own machine!
But thanks to &lt;code>homeshick&lt;/code> we can now start up a fresh
container and have it mimic &lt;code>$HOME&lt;/code> in a matter of seconds!
Let me demonstrate it for you with a LXD container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:20.04 tmp-20-04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc profile add castle tmp-20-04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc ubuntu tmp-20-04
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ahhh, what a cozy tiny disposable home!&lt;/p>
&lt;p>That seemed too easy to you? Alright I confess, I used some of my own aliases here.
But isn&amp;rsquo;t it what this whole post is about?
Note that the above 3 lines really boils down to,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc launch ubuntu:20.04 tmp-20-04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ lxc &lt;span class="nb">exec&lt;/span> tmp-20-04 -- sudo --login --user ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/andsens/homeshick.git &lt;span class="nv">$HOME&lt;/span>/.homesick/repos/homeshick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> ~/.homesick/repos/homeshick/homeshick.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ homeshick clone git@github.com:user/dotfiles.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ homeshick link dotfiles
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this example,
I hope that I managed to offer you a glimpse at the power of &lt;code>homeshick&lt;/code>
(and more generally of dotfiles managers),
especially when coupled to a containerized workflow.&lt;/p>
&lt;p>Before closing this post, let me give you one last tip.
Because we made our containerized workflow rather seamless with our
host, it can be easy to lose track of which shell is in a container and which
is not. To differentiate them, add the following to your &lt;code>.bashrc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> prompt_lxc_header&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -e /dev/lxd/sock &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;[LXC] &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PS1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;$(prompt_lxc_header)&amp;#39;&lt;/span>&lt;span class="nv">$PS1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When used in a container,
a shell prompt in the said container will now look something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>LXC&lt;span class="o">]&lt;/span> ubuntu@tmp-20-04:~$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>No more confusion 👍&lt;/p></description></item><item><title>ROS Noetic development workflow in LXC</title><link>https://artivis.github.io/post/2020/lxc/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2020/lxc/</guid><description>&lt;p>In this post, we will discuss how to setup a &lt;a href="https://linuxcontainers.org/" target="_blank" rel="noopener">Linux container&lt;/a>
- a.k.a &lt;a href="https://linuxcontainers.org/" target="_blank" rel="noopener">LXC&lt;/a> - for our &lt;a href="http://wiki.ros.org/noetic" target="_blank" rel="noopener">ROS Noetic&lt;/a> development.
Developing in containers has several
advantages such as:&lt;/p>
&lt;ul>
&lt;li>allowing us to use a different Linux distribution than the one we&amp;rsquo;ve installed on
our host machine&lt;/li>
&lt;li>providing a repeatable course of actions&lt;/li>
&lt;li>messing around, installing a tons of dependencies without polluting our computer&lt;/li>
&lt;li>burning the container to the ground and starting fresh again easily&lt;/li>
&lt;/ul>
&lt;p>There are of course many other upsides but those are the one we are really
interested in for now.
We will see first how to get started with LXC and install the latest ROS release Noetic.
We will then configure our container so that it is able to share a workspace
with our host machine. We will also enable the use of graphical applications
from the container (e.g. Rviz, Gazebo).&lt;/p>
&lt;p>The main prerequisites for this post are to be familiar with:&lt;/p>
&lt;ul>
&lt;li>the command terminal in Linux&lt;/li>
&lt;li>ROS development&lt;/li>
&lt;li>LXC&lt;/li>
&lt;/ul>
&lt;p>Note that I will be linking resources throughout the text,
make sure to check them whenever you need further information.&lt;/p>
&lt;p>Finally, while we will be focusing on the latest ROS Noetic release,
the setup presented here applies not only to other ROS distributions
but likely to most projects, be them ROS-based or not.&lt;/p>
&lt;h2 id="setting-up-the-lxc">Setting up the LXC&lt;/h2>
&lt;p>We will start by installing LXD, a lightweight container hypervisor which
extends LXC functionality over the network.
LXD uses LXC under the covers for some container management tasks and
provides the &amp;rsquo;lxc&amp;rsquo; command line interface tool we will use throughout this post.
For more information, you can refer to the
&lt;a href="https://ubuntu.com/server/docs/containers-lxc" target="_blank" rel="noopener">LXC&lt;/a> and &lt;a href="https://ubuntu.com/server/docs/containers-lxd" target="_blank" rel="noopener">LXD&lt;/a> documentation
on the Ubuntu website.&lt;/p>
&lt;p>Alright, let us install LXD as a &lt;a href="https://snapcraft.io/" target="_blank" rel="noopener">snap&lt;/a> to make sure we always run
the most up to date stable version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo snap install lxd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before we can create our first container, we must initialize LXD,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo lxd init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will prompt you with a bunch of questions to fine tune LXD use.
Unless you know what you are doing, you can safely hit the default answers.&lt;/p>
&lt;p>Finally, we will add our user to the &amp;rsquo;lxd&amp;rsquo; group so that we can run lxd commands
without sudo,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo gpasswd -a &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">USER&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> lxd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should log out and log in again for this to take effect.&lt;/p>
&lt;h3 id="creating-the-container">Creating the container&lt;/h3>
&lt;p>To create a new container, we will use the following command,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch &lt;span class="o">{&lt;/span>remote&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>image&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>container-name&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since Noetic runs on Ubuntu 20.04, we will fetch a Ubuntu 20.04 image
from the official Ubuntu remote,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch ubuntu:20.04 ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can check that the container was properly created and launched,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------+---------+-----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> NAME &lt;span class="p">|&lt;/span> STATE &lt;span class="p">|&lt;/span> IPV4 &lt;span class="p">|&lt;/span> IPV6 &lt;span class="p">|&lt;/span> TYPE &lt;span class="p">|&lt;/span> SNAPSHOTS &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------+---------+-----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> ros-noetic &lt;span class="p">|&lt;/span> RUNNING &lt;span class="p">|&lt;/span> 10.160.218.172 &lt;span class="o">(&lt;/span>eth0&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span> dd42:5ke1:fr68:2ca4:236:eff3:fe3r:7c21 &lt;span class="o">(&lt;/span>eth0&lt;span class="o">)&lt;/span> &lt;span class="p">|&lt;/span> CONTAINER &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+---------------+---------+-----------------------+-----------------------------------------------+-----------+-----------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With our container up and running, we can open a shell in it with a non-root user
with the following command,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">exec&lt;/span> ros-noetic -- sudo --login --user ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I know, this command is not very pretty nor easy to remember.
But worry not, we will create an alias to ease future use.&lt;/p>
&lt;h3 id="lxc-aliases-to-the-rescue">LXC aliases to the rescue&lt;/h3>
&lt;p>LXC aliases, just like bash aliases, allow use to create a new CLI
keywords to which we can associate an action.
The command to create a new alias is,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add &lt;span class="o">{&lt;/span>alias&lt;span class="o">}&lt;/span> &lt;span class="s1">&amp;#39;{command}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As an example, let us create a shorter version of the &lt;code>lxc list&lt;/code> command
that also prints a more compact result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add ls &lt;span class="s1">&amp;#39;list --format csv -c n&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can check that the alias is correctly created,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc &lt;span class="nb">alias&lt;/span> list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+--------+----------------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> ALIAS &lt;span class="p">|&lt;/span> TARGET &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+--------+----------------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> ls &lt;span class="p">|&lt;/span> list --format csv -c n &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+--------+----------------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we can now simply use it,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s pretty neat.&lt;/p>
&lt;p>But our main goal with aliases was to simplify our shell
login to the container, so let&amp;rsquo;s just do that.
Borrowing from the excellent &lt;a href="https://blog.simos.info/using-command-aliases-in-lxd-to-exec-a-shell/" target="_blank" rel="noopener">blog post by Simos Xenitellis&lt;/a>
about LXC aliases, we will create a new alias &amp;lsquo;ubuntu&amp;rsquo; such as,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc &lt;span class="nb">alias&lt;/span> add ubuntu &lt;span class="s1">&amp;#39;exec @ARGS@ --mode interactive -- /bin/sh -xac $@ubuntu - exec /bin/login -p -f &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This alias allows us now to simply connect to our container with,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc ubuntu ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s much better isn&amp;rsquo;t it?&lt;/p>
&lt;h2 id="install-ros-noetic">Install ROS Noetic&lt;/h2>
&lt;p>&lt;a href="http://wiki.ros.org/noetic" target="_blank" rel="noopener">ROS Noetic&lt;/a> is the latest and final ROS 1 release.
The ROS project hasn&amp;rsquo;t come to an end, on the contrary, it rather look forward
and focus its efforts
toward the second version, namely ROS 2.
Nevertheless, ROS Noetic is an important release because it targets
Ubuntu 20.04, has official Python 3 support and will be supported until
May 2025 (more information on &lt;a href="http://wiki.ros.org/noetic" target="_blank" rel="noopener">Noetic wiki page&lt;/a>).
That leaves us plenty of time to learn and move to ROS 2.&lt;/p>
&lt;p>To install it, let&amp;rsquo;s first connect to our container using our new LXC alias,&lt;/p>
&lt;!-- we will simply follow the [official documentation][noetic-install]. -->
&lt;!-- Let us execute a shell in our container using our new LXC alias, -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc ubuntu ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, we will add the ROS packages repository to our sources.
Starting with the key,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt-key adv --fetch-keys https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the repository,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt-add-repository http://packages.ros.org/ros/ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case of trouble, you can also refer to the &lt;a href="http://wiki.ros.org/noetic/Installation/Ubuntu" target="_blank" rel="noopener">official documentation&lt;/a>.&lt;/p>
&lt;p>We are all set to install ROS Noetic!&lt;/p>
&lt;p>Here we can choose either of three installations;
we can install only the core components,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-noetic-ros-base
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or core + the visualization stack (e.g. Rviz),&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-noetic-desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or core + the visualization + simulation stacks (e.g. Gazebo),&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install ros-noetic-desktop-full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can pick any depending on your needs.
If you are not sure, I would recommend you install only the core components
and later install other packages on a per-need basis:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt install ros-noetic-ros-base
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install ros-noetic-&amp;lt;package-I-need&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simply to keep the size of the container as small as possible.&lt;/p>
&lt;p>Finally, we will automatically source Noetic since this container is dedicated
to it,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;source /opt/ros/noetic/setup.bash&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every times we will log into our container, ROS Noetic will be sourced
and we will be ready to develop!&lt;/p>
&lt;h2 id="mounting-a-local-workspace">Mounting a local workspace&lt;/h2>
&lt;p>What would our development workflow look like without some actual source code to
work on? Well, let us set up our ROS workspace.&lt;/p>
&lt;p>Rather than copying/creating our workspace in the container,
we will keep it on the host machine. By doing so,
not only the workspace will survive deleting the LXC (persistence)
but we will also be able to share it across several LXC
thus across several ROS distros.&lt;/p>
&lt;p>Hereafter, we will assume our workspace to be simply &lt;code>~/workspace&lt;/code>
on the host with the classic tree,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ tree ~/workspace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/home/user/workspace/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── my_ros_package
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To share a folder with the container, we have to add a &amp;lsquo;device disk&amp;rsquo; to it.
The general command to do so is of the form,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc config device add &lt;span class="o">{&lt;/span>container&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>device-name&lt;span class="o">}&lt;/span> disk &lt;span class="nv">source&lt;/span>&lt;span class="o">={&lt;/span>full-path-to-folder&lt;span class="o">}&lt;/span> &lt;span class="nv">path&lt;/span>&lt;span class="o">={&lt;/span>full-path-inside-container&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>filling up the placeholders for our use case, it reads,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc config device add ros-noetic workspace disk &lt;span class="nv">source&lt;/span>&lt;span class="o">=&lt;/span>~/workspace &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/home/ubuntu/workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the device added, we have to configure the access rights so that we can read and write
the folder and its content in the container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc config &lt;span class="nb">set&lt;/span> ros-noetic raw.idmap &lt;span class="s2">&amp;#34;both &lt;/span>&lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We now have to restart the container for the changes to take effects,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc restart ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us log back into our container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc ubuntu ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and verify that the folder is properly mounted,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">22&lt;/span> ubuntu ubuntu &lt;span class="m">4096&lt;/span> May &lt;span class="m">22&lt;/span> 21:21 workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks like we are good!&lt;/p>
&lt;p>In this section we have configured our container through the &lt;code>lxc config&lt;/code>
cli tool. Note that container configuration is saved in a yaml file, which you
can review with,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc config show &lt;span class="o">{&lt;/span>container&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and directly edit with,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc config edit &lt;span class="o">{&lt;/span>container&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More on that later.&lt;/p>
&lt;h2 id="using-graphical-applications">Using graphical applications&lt;/h2>
&lt;p>This part is totally &lt;em>optional&lt;/em> and depends on whether you are planning to run
some graphical applications (e.g. Rviz, Gazebo) in your container or not.
If you are not interested in running any gui in your container,
you may still want to have a quick look before jumping at the
&amp;lsquo;&lt;a href="#profile-all-the-things">Profile all the things!&lt;/a>&amp;rsquo; section.
If you do want to run graphical applications,
then we have to configure the container to support that.&lt;/p>
&lt;p>Unlike in the previous section, we are not going to use the &lt;code>lxc config&lt;/code> tool
to configure our container. Instead, we will introduce &lt;code>lxc profile&lt;/code> as a way
to create easily reusable configurations.A &lt;em>profile&lt;/em> is a set of parameters
that can be applied to a container in one go. It can describe a full fledged
setup or a particular feature as in our case below.
Furthermore a profile can be use by a single container or many. Reusability!&lt;/p>
&lt;h2 id="creating-a-lxd-profile">Creating a LXD profile&lt;/h2>
&lt;p>Let us first create a profile named &lt;code>gui&lt;/code>,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile create gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>we can now edit the profile,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile edit gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and paste the following,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment.DISPLAY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">raw.idmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">both 1000 1000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Enables graphical apps use.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">X0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/.X11-unix/X0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">source&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/tmp/.X11-unix/X0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">disk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mygpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gpu&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gui&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">used_by&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, you can use the following one liner,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl https://gist.githubusercontent.com/artivis/37c961e157e99f6fcaff0204a0f59731/raw/ca4abd1a3c6b1d8a74910207903ac7723685dce1/gui.yaml &lt;span class="p">|&lt;/span> lxc profile edit gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this profile, there might be a couple things for you to tweak depending on
your machine. For instance your user id and guid,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">raw.idmap: both &lt;span class="m">1000&lt;/span> &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which you can retrieve respectively with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ id -u
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ id -g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may also have to check your graphic card in use looking at the directory
&lt;code>/tmp/.X11-unix/&lt;/code>.&lt;/p>
&lt;p>Now that our profile is set up, we have to add it to our container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile add ros-noetic gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As previously, we have to restart the container for those change to take effect,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc restart ros-noetic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alright, let us try to open Rviz to make sure everything went fine.
Open two shells to the container, one running the roscore and the second
running Rviz:&lt;/p>
&lt;p>Shell 1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">roscore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shell 2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rosrun rviz rviz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are getting really close to our regular development experience aren&amp;rsquo;t we?&lt;/p>
&lt;h3 id="dedicated-graphic-card">Dedicated graphic card&lt;/h3>
&lt;p>If you have a dedicated graphic card on your host machine,
you will also have to install the &lt;em>very same driver&lt;/em> in the container
in order to use graphical applications.
If you have an Nvidia card, the following should help you.
To figure out the driver version on the host we&amp;rsquo;ll type,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ nvidia-smi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mon May &lt;span class="m">12&lt;/span> 11:59:59 &lt;span class="m">2020&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-----------------------------------------------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> NVIDIA-SMI 440.82 Driver Version: 440.82 CUDA Version: 10.2 &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------------------+----------------------+----------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All we have to do now is to install the same driver in the container,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install nvidia-440
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="profile-all-the-things">Profile all the things&lt;/h2>
&lt;p>We have seen in section &lt;a href="#creating-a-lxd-profile">&amp;lsquo;Creating a LXD profile&amp;rsquo;&lt;/a> how to
create a LXC profile to easily support running graphical
apps in our container(s).
As we mentioned before, a profile really only is a set of configurations
for our container.
So one may ask&lt;/p>
&lt;blockquote>
&lt;p>can&amp;rsquo;t we create some other profiles to further group all the configs we&amp;rsquo;ve seen?&lt;/p>
&lt;/blockquote>
&lt;p>Well, yes we can! And guess what? Containers can have several profiles!
So we could totally create another profile to automatically
add the ROS apt repository, both for ROS 1 and ROS 2 respectively:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile create ros-apt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc profile edit ros-apt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and add,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user.user-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> #cloud-config
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> runcmd:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;apt-key adv --fetch-keys https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;apt-add-repository http://packages.ros.org/ros/ubuntu&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> - &amp;#34;apt-add-repository http://packages.ros.org/ros2/ubuntu&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Add ROS apt repository&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ros&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">used_by&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly we could create another profile to easily share our ROS workspace
as well,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile create ros-ws
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lxc profile edit ros-ws
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and add,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">raw.idmap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">both 1000 1000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Share the ROS workspace&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">devices&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workspaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home/ubuntu/workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">source&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/home/user/workspace&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">disk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ros-ws&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">used_by&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And remember to tweak both profiles (user id/guid etc.).&lt;/p>
&lt;p>Both profiles will greatly help when creating a new container.
However, before we get all excited, let me tell you that
we have to be cautious when using them.
The reason is that both should be added a rather specific times
of the container creation. Let us see when that is.&lt;/p>
&lt;p>First, the &amp;lsquo;ros-apt&amp;rsquo; profile makes use of &lt;a href="https://cloudinit.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">cloud-init&lt;/a>
to preconfigure the container meaning that our &lt;code>apt-key/apt-add-repository&lt;/code>
command will be run &lt;strong>only once&lt;/strong> when the container is &lt;strong>first created&lt;/strong>
(see &lt;a href="https://blog.simos.info/how-to-preconfigure-lxd-containers-with-cloud-init/" target="_blank" rel="noopener">this other blog post by Simos Xenitellis&lt;/a>
for more info about cloud-init in LXD).
To create a container with given profile(s),
the &lt;code>lxc launch&lt;/code> commands changes to,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch --profile &lt;span class="o">{&lt;/span>profile-a&lt;span class="o">}&lt;/span> --profile &lt;span class="o">{&lt;/span>profile-b&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>remote&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>image&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>container-name&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which in our case looks like,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc launch --profile default --profile ros-apt ubuntu:20.04 ros-noetic2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let me insist again. If you try to &lt;em>add&lt;/em> the &amp;lsquo;ros-apt&amp;rsquo; profile after the container
was created, &lt;em>nothing will happen&lt;/em>:
&lt;del>&lt;code>lxd profile add ros-noetic ros-apt&lt;/code>&lt;/del>!&lt;/p>
&lt;p>Concerning our &amp;lsquo;ros-ws&amp;rsquo; profile, it is a bit of the opposite situation.
Indeed, when creating the container, a whole bunch of things are ran before
the &amp;lsquo;ubuntu&amp;rsquo; user is set up. Since we are linking our workspace to &lt;code>/home/ubuntu/&lt;/code>
we may arrive to early so to speak and it results in messing up the
proper set up of the user. For this profile, we therefore
&lt;em>have to add it after the container creation&lt;/em>
(&lt;del>&lt;code>lxc launch --profile ros-ws {remote}:{image} {container-name}&lt;/code>&lt;/del>).&lt;/p>
&lt;p>We can add our ros-ws profile to a container with,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lxc profile add ros-noetic ros-ws
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This whole tempo story sounds annoying.
Alright let&amp;rsquo;s call it a day and summarize how to set up a new container.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up&lt;/h2>
&lt;p>Well, that was quite a journey in LXD realm.
But our efforts were not vain for we have learned a lot
about LXD and set up some great tools.&lt;/p>
&lt;p>Soon, the &lt;a href="https://index.ros.org/doc/ros2/Releases/Release-Foxy-Fitzroy/" target="_blank" rel="noopener">ROS 2 Foxy&lt;/a> distro will be released
(5th of June).
How will we then create a Foxy container?
Well, that&amp;rsquo;s quite simple now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ lxc launch --profile default --profile ros-apt --profile gui ubuntu:20.04 ros-foxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ lxc profile add ros-foxy ros-ws
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ lxc ubuntu ros-foxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install ros-foxy-desktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Off we go!&lt;/p>
&lt;!--
# Speed up new LXC set up
@todo: snapshots + create container from snapshots + lxc-this script. Maybe for another post?
-->
&lt;!-- Links --></description></item></channel></rss>